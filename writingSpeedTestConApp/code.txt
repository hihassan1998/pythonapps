from pathlib import Path

def read_file(filename:Path):
    """Function reads in the file and returns the lines."""
    with open(filename, 'r', encoding='utf-8') as filehandle:
        lines = filehandle.readlines()
    return lines

def count_words(lines):
    """Function returns a list of words from the file, removing specified symbols."""
    word_per_line = []
    for words in lines:
        word_per_line.extend(words.split())
    return word_per_line

def count_letters(word_per_line):
    """Counts the total occurrences of letters in the list of words."""
    total_letter_count = sum(len(word) for word in word_per_line)
    return total_letter_count

def correct_count(lines):
    """Counts total words and letters, printing the results."""
    if lines:
        word_list = count_words(lines)  # Get list of words from lines
        letter_count = count_letters(word_list)  # Get letters total
        total_words = len(word_list)  # Total number of words

        print(f"Total words: {total_words}")
        print(f"Total unique letters: {letter_count}")

def start_game(lines):
    """Function starts the typing game and calculates word and character precision."""

    # Initialize counters for words counting and precission

    result = []  # List to store individual line results
    total_correct_words = 0  # Total number of correctly typed words
    total_words_needed = 0  # Total number of expected words across lines

    # Initialize counters for words counting and precission

    # total_correct_letters_typed= 0  # Correct characters typed

    total_letters_needed = 0  # Total characters expected across lines
    # misspelled_chars = {}  # Dictionary to track misspelled characters

    for line in lines:
        print("\nSkriv följande rad:")
        print(line.strip())  # Display the expected line
        user_input = input("--> ").strip()  # Get the user's input

        # Split into words and count the necessary/typed words
        correct_words = line.strip().split()
        user_words = user_input.split()
        total_words_needed += len(correct_words)

        # Calculate correct word count
        correct_word_count = sum(1 for i in range(len(correct_words))
                                  if i < len(user_words) and user_words[i] == correct_words[i])
        total_correct_words += correct_word_count

        # Precision calculation for words
        this_word_precision = (total_correct_words / total_words_needed) * 100 if total_words_needed > 0 else 0
        #
        # Start calulating the characters
        #
        # Split words into letters and count get the list of correct letters
        # correct_letters = []
        # for word in correct_words:
        #     correct_letters.extend(word)
        # total_letters_needed += len(correct_letters)
        # Split user_words into letters, and get the list of user letters to compare later
        # user_letters = []
        # for word in user_words:
        #     user_letters.extend(word)
         # Process letter precision
        correct_letters = "".join(correct_words)  # Flatten correct words into a string of letters
        user_letters = "".join(user_words)  # Flatten user words into a string of letters
        total_letters_needed += len(correct_letters)  # Count of expected letters for this line
        # Calculate correct letter count
        correct_letter_count = sum(1 for i in range(len(correct_letters))
                                if i < len(user_letters) and user_letters[i] == correct_letters[i])
        # Update total correct characters and total characters needed
        correct_letter_count += 1
        # total_letters_needed += line_characters_needed


        # Calculate accuracy
        total_correct_letters1 = 0
        for i in range(min(len(correct_letters), len(user_letters))):
            if correct_letters[i] == user_letters[i]:
                total_correct_letters1 += 1
         # Precision calculation for letters
        this_letter_precision = (total_correct_letters1 / len(correct_letters)) * 100
        # this_letter_precision = (total_correct_letters_typed / total_letters_needed) * 100 if total_letters_needed > 0 else 0

        print(f"Words-precision för denna rad: {this_word_precision:.2f}%")
        print(f"Chars-precision för denna rad: {this_letter_precision:.2f}%")

    # After all lines, calculate cumulative  word precision
    name = input("Ange ditt namn: ")
    total_word_precision = (total_correct_words / total_words_needed) * 100 if total_words_needed > 0 else 0

    # After all lines calulate cumulative letter precision
    # total_letter_precision = (total_correct_letters / total_characters_needed) * 100 if total_characters_needed > 0 else 0
    total_letter_precision = (total_correct_letters1 / total_letters_needed) * 100 if total_letters_needed > 0 else 0

    print(f"\nTotal ordprecision: {total_word_precision:.2f}%")
    print(f"Total teckenprecision: {total_letter_precision:.2f}%")

    # # Display misspelled characters summary
    # print("Felstavade tecken:")
    # for char, count in sorted(misspelled_chars.items(), key=lambda item: (-item[1], item[0])):
    #     print(f"   {char}: {count}")

    # Save results to file
    result.append((name, total_word_precision, total_letter_precision))
    save_result(result)




def save_result(result):
    """Function saves the results in 'score.txt' file"""
    with open("score.txt", 'a', encoding='utf-8') as filehandle:
        for name, word_precision, char_precision in result:
            filehandle.write(f"{name}: Ordprecision: {word_precision:.2f}%, Teckenprecision: {char_precision:.2f}%\n")

def show_results():
    """Function reads the results from 'score.txt' file"""
    print("\nResultat:")
    with open('score.txt', 'r', encoding='utf-8') as file:
        scores = file.readlines()
        for score in scores:
            print(score.strip())